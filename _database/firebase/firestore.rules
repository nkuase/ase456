// Firestore Security Rules for Student Management System
// Copy this to your Firebase Console > Firestore Database > Rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // === DEVELOPMENT RULES (Allow all - for testing only) ===
    // Uncomment for development/testing
    /*
    match /{document=**} {
      allow read, write: if true;
    }
    */
    
    // === PRODUCTION RULES ===
    
    // Students Collection Rules
    match /students/{studentId} {
      
      // 1. BASIC AUTHENTICATION RULE
      // Allow read/write for authenticated users only
      allow read, write: if request.auth != null;
      
      // 2. GRANULAR PERMISSIONS
      // Separate rules for different operations
      /*
      allow read: if request.auth != null;
      allow create: if request.auth != null 
                    && isValidStudentData(request.resource.data);
      allow update: if request.auth != null 
                    && isValidStudentData(request.resource.data)
                    && resource.data.createdAt == request.resource.data.createdAt;
      allow delete: if request.auth != null;
      */
      
      // 3. USER-SPECIFIC ACCESS
      // Users can only access their own student records
      /*
      allow read, write: if request.auth.uid == studentId;
      */
      
      // 4. ROLE-BASED ACCESS CONTROL
      // Different permissions for different user roles
      /*
      allow read: if request.auth != null;
      allow write: if request.auth != null 
                   && request.auth.token.role in ['admin', 'teacher'];
      allow delete: if request.auth != null 
                    && request.auth.token.role == 'admin';
      */
      
      // 5. DATA VALIDATION RULES
      // Validate data structure and content
      allow create, update: if request.auth != null
                            && isValidStudentData(request.resource.data);
    }
    
    // === HELPER FUNCTIONS ===
    
    // Validate student data structure and content
    function isValidStudentData(data) {
      return validateStudentFields(data)
             && validateStudentTypes(data)
             && validateStudentValues(data);
    }
    
    // Check required fields exist
    function validateStudentFields(data) {
      return data.keys().hasAll(['name', 'age', 'major'])
             && data.keys().hasOnly(['name', 'age', 'major', 'createdAt', 'updatedAt']);
    }
    
    // Check field data types
    function validateStudentTypes(data) {
      return data.name is string
             && data.age is int
             && data.major is string;
    }
    
    // Check field value constraints
    function validateStudentValues(data) {
      return validateName(data.name)
             && validateAge(data.age)
             && validateMajor(data.major);
    }
    
    // Name validation: 2-100 characters, letters and common punctuation only
    function validateName(name) {
      return name.size() >= 2
             && name.size() <= 100
             && name.matches('^[a-zA-Z\\s\\-\\.\']+$');
    }
    
    // Age validation: 16-120 years
    function validateAge(age) {
      return age >= 16 && age <= 120;
    }
    
    // Major validation: must be from approved list
    function validateMajor(major) {
      return major in [
        'Computer Science',
        'Computer Engineering', 
        'Software Engineering',
        'Data Science',
        'Information Technology',
        'Mathematics',
        'Physics',
        'Chemistry',
        'Biology',
        'Engineering',
        'Mechanical Engineering',
        'Electrical Engineering',
        'Civil Engineering',
        'Business Administration',
        'Economics',
        'Psychology',
        'English Literature',
        'Art',
        'Music',
        'Philosophy',
        'History',
        'Political Science',
        'Sociology',
        'Anthropology',
        'Medicine',
        'Nursing',
        'Pharmacy',
        'Law',
        'Education',
        'Architecture'
      ];
    }
    
    // === ADVANCED RULES EXAMPLES ===
    
    // Time-based access (e.g., business hours only)
    /*
    function isBusinessHours() {
      return request.time.hours() >= 9 && request.time.hours() <= 17;
    }
    */
    
    // Rate limiting (prevent too many writes)
    /*
    function isNotSpamming() {
      return request.time > resource.data.updatedAt + duration.value(1, 'm');
    }
    */
    
    // IP address restrictions
    /*
    function isFromAllowedNetwork() {
      return request.auth.token.ip in ['192.168.1.0/24', '10.0.0.0/8'];
    }
    */
    
    // Audit trail - log all changes
    /*
    match /audit/{auditId} {
      allow create: if request.auth != null;
      allow read: if request.auth.token.role == 'admin';
    }
    */
    
    // === COLLECTION GROUP QUERIES ===
    // Rules for collection group queries (querying across subcollections)
    /*
    match /{path=**}/students/{studentId} {
      allow read: if request.auth != null;
    }
    */
    
    // === SUBCOLLECTIONS ===
    // Rules for nested data structures
    /*
    match /students/{studentId}/grades/{gradeId} {
      allow read, write: if request.auth != null 
                         && request.auth.uid == resource.data.studentId;
    }
    
    match /students/{studentId}/courses/{courseId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null 
                   && request.auth.token.role in ['admin', 'teacher'];
    }
    */
  }
}

// === STORAGE RULES (if using Firebase Storage) ===
/*
service firebase.storage {
  match /b/{bucket}/o {
    match /student_photos/{studentId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null
                   && request.auth.uid == studentId
                   && resource.size < 5 * 1024 * 1024  // 5MB limit
                   && resource.contentType.matches('image/.*');
    }
    
    match /documents/{path=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null 
                   && request.auth.token.role in ['admin', 'teacher'];
    }
  }
}
*/

// === REALTIME DATABASE RULES (if using Realtime Database) ===
/*
{
  "rules": {
    "students": {
      "$studentId": {
        ".read": "auth != null",
        ".write": "auth != null && validateStudent(newData)",
        ".validate": "newData.hasChildren(['name', 'age', 'major'])"
      }
    }
  }
}
*/

// === TESTING YOUR RULES ===
// Use the Firebase Console Rules Playground to test these rules:
// 1. Go to Firestore Database > Rules
// 2. Click "Rules Playground"
// 3. Test different scenarios:
//    - Authenticated vs unauthenticated users
//    - Different user roles
//    - Valid vs invalid data
//    - Edge cases (empty strings, null values, etc.)

// === SECURITY CHECKLIST ===
// ✅ Authenticate users before allowing access
// ✅ Validate all input data
// ✅ Use principle of least privilege
// ✅ Test rules thoroughly
// ✅ Monitor for unusual activity
// ✅ Keep rules simple and readable
// ✅ Document your security model
// ✅ Regular security reviews

// === COMMON SECURITY MISTAKES TO AVOID ===
// ❌ allow read, write: if true; (in production)
// ❌ Trusting client-side validation only
// ❌ Not validating data types
// ❌ Overly complex rules that are hard to understand
// ❌ Not testing edge cases
// ❌ Hardcoding user IDs or sensitive data
// ❌ Not implementing proper logging/monitoring
