#!/usr/bin/env python3
"""
Firebase Config JSON to Flutter firebase_options.dart Converter

This script converts a Firebase configuration JSON file to Flutter's firebase_options.dart format.
"""

import json
import sys
import os
from pathlib import Path


def load_config_json(file_path):
    """Load and parse the Firebase config JSON file."""
    try:
        with open(file_path, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ùå Error: File '{file_path}' not found.")
        return None
    except json.JSONDecodeError as e:
        print(f"‚ùå Error: Invalid JSON format in '{file_path}': {e}")
        return None


def extract_firebase_config(config_data):
    """Extract Firebase configuration from various JSON formats."""
    
    # Try different possible structures
    firebase_config = None
    
    # Format 1: Direct Firebase config object
    if 'apiKey' in config_data and 'projectId' in config_data:
        firebase_config = config_data
    
    # Format 2: Nested under 'firebase' key
    elif 'firebase' in config_data:
        firebase_config = config_data['firebase']
    
    # Format 3: Web app config format
    elif 'result' in config_data and 'appId' in config_data['result']:
        firebase_config = config_data['result']
    
    # Format 4: Google Services format (android)
    elif 'project_info' in config_data:
        project_info = config_data['project_info']
        client_info = config_data.get('client', [{}])[0] if config_data.get('client') else {}
        
        firebase_config = {
            'projectId': project_info.get('project_id', ''),
            'messagingSenderId': project_info.get('project_number', ''),
            'storageBucket': project_info.get('storage_bucket', ''),
            'apiKey': client_info.get('api_key', [{}])[0].get('current_key', '') if client_info.get('api_key') else '',
            'appId': client_info.get('client_id', '')
        }
    
    return firebase_config


def generate_firebase_options_dart(config):
    """Generate the firebase_options.dart file content."""
    
    # Extract required fields with fallbacks
    project_id = config.get('projectId', config.get('project_id', 'your-project-id'))
    api_key = config.get('apiKey', config.get('api_key', 'your-api-key'))
    app_id = config.get('appId', config.get('app_id', 'your-app-id'))
    messaging_sender_id = config.get('messagingSenderId', config.get('messaging_sender_id', 'your-sender-id'))
    storage_bucket = config.get('storageBucket', config.get('storage_bucket', f'{project_id}.appspot.com'))
    auth_domain = config.get('authDomain', config.get('auth_domain', f'{project_id}.firebaseapp.com'))
    measurement_id = config.get('measurementId', config.get('measurement_id', ''))
    
    dart_content = f'''// File generated by Firebase Config Converter
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {{
  static FirebaseOptions get currentPlatform {{
    if (kIsWeb) {{
      return web;
    }}
    switch (defaultTargetPlatform) {{
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }}
  }}

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: '{api_key}',
    appId: '{app_id}',
    messagingSenderId: '{messaging_sender_id}',
    projectId: '{project_id}',
    authDomain: '{auth_domain}',
    storageBucket: '{storage_bucket}',{f"""
    measurementId: '{measurement_id}',""" if measurement_id else ""}
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: '{api_key}',
    appId: '{app_id}',
    messagingSenderId: '{messaging_sender_id}',
    projectId: '{project_id}',
    storageBucket: '{storage_bucket}',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: '{api_key}',
    appId: '{app_id}',
    messagingSenderId: '{messaging_sender_id}',
    projectId: '{project_id}',
    storageBucket: '{storage_bucket}',
    iosBundleId: 'com.example.{project_id.replace("-", "_")}',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: '{api_key}',
    appId: '{app_id}',
    messagingSenderId: '{messaging_sender_id}',
    projectId: '{project_id}',
    storageBucket: '{storage_bucket}',
    iosBundleId: 'com.example.{project_id.replace("-", "_")}',
  );
}}'''
    
    return dart_content


def main():
    """Main function to handle command line arguments and conversion."""
    
    # Check command line arguments
    if len(sys.argv) < 2:
        print("üìã Firebase Config to Flutter Converter")
        print("=" * 50)
        print("Usage: python config_converter.py <config.json> [output_file]")
        print()
        print("Examples:")
        print("  python config_converter.py config.json")
        print("  python config_converter.py config.json firebase_options.dart")
        print("  python config_converter.py path/to/config.json")
        return
    
    config_file = sys.argv[1]
    output_file = sys.argv[2] if len(sys.argv) > 2 else "firebase_options.dart"
    
    print("üî• Firebase Config Converter")
    print("=" * 40)
    print(f"üìÅ Input file: {config_file}")
    print(f"üìÑ Output file: {output_file}")
    print()
    
    # Load the config JSON
    print("üìñ Loading configuration file...")
    config_data = load_config_json(config_file)
    if not config_data:
        return
    
    # Extract Firebase config
    print("üîç Extracting Firebase configuration...")
    firebase_config = extract_firebase_config(config_data)
    if not firebase_config:
        print("‚ùå Error: Could not extract Firebase configuration from JSON file.")
        print("Expected format: JSON with Firebase config fields like 'projectId', 'apiKey', etc.")
        print()
        print("Example expected format:")
        print('''{
  "projectId": "your-project-id",
  "apiKey": "your-api-key",
  "appId": "your-app-id",
  "messagingSenderId": "123456789",
  "storageBucket": "your-project.appspot.com",
  "authDomain": "your-project.firebaseapp.com"
}''')
        return
    
    # Display extracted config
    print("‚úÖ Firebase configuration extracted:")
    for key, value in firebase_config.items():
        if key in ['apiKey', 'appId']:
            # Mask sensitive values
            masked_value = value[:8] + "..." if len(value) > 8 else value
            print(f"   {key}: {masked_value}")
        else:
            print(f"   {key}: {value}")
    print()
    
    # Generate Dart code
    print("üîß Generating firebase_options.dart...")
    dart_content = generate_firebase_options_dart(firebase_config)
    
    # Write to file
    try:
        with open(output_file, 'w') as f:
            f.write(dart_content)
        print(f"‚úÖ Successfully generated: {output_file}")
        print()
        print("üöÄ Next steps:")
        print("1. Copy firebase_options.dart to your Flutter project's lib/ folder")
        print("2. Update your main.dart to import and use DefaultFirebaseOptions")
        print("3. Run your Flutter app!")
        print()
        print("Example main.dart usage:")
        print('''import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  runApp(MyApp());
}''')
        
    except IOError as e:
        print(f"‚ùå Error writing to file '{output_file}': {e}")


if __name__ == "__main__":
    main()