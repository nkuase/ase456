// Mocks generated by Mockito 5.4.4 from annotations
// in todo/test/mocks/simple_mock_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:todo/models/todo.dart' as _i2;
import 'package:todo/services/todo_service.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TodoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoService extends _i1.Mock implements _i4.TodoService {
  @override
  List<_i2.Todo> getAllTodos() => (super.noSuchMethod(
        Invocation.method(
          #getAllTodos,
          [],
        ),
        returnValue: <_i2.Todo>[],
        returnValueForMissingStub: <_i2.Todo>[],
      ) as List<_i2.Todo>);

  @override
  void addTodo(_i2.Todo? todo) => super.noSuchMethod(
        Invocation.method(
          #addTodo,
          [todo],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateTodo(_i2.Todo? updatedTodo) => super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [updatedTodo],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void deleteTodo(String? id) => super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void toggleTodo(String? id) => super.noSuchMethod(
        Invocation.method(
          #toggleTodo,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i2.Todo> getCompletedTodos() => (super.noSuchMethod(
        Invocation.method(
          #getCompletedTodos,
          [],
        ),
        returnValue: <_i2.Todo>[],
        returnValueForMissingStub: <_i2.Todo>[],
      ) as List<_i2.Todo>);

  @override
  List<_i2.Todo> getPendingTodos() => (super.noSuchMethod(
        Invocation.method(
          #getPendingTodos,
          [],
        ),
        returnValue: <_i2.Todo>[],
        returnValueForMissingStub: <_i2.Todo>[],
      ) as List<_i2.Todo>);

  @override
  List<_i2.Todo> searchTodos(String? query) => (super.noSuchMethod(
        Invocation.method(
          #searchTodos,
          [query],
        ),
        returnValue: <_i2.Todo>[],
        returnValueForMissingStub: <_i2.Todo>[],
      ) as List<_i2.Todo>);
}
